{
    "docs": [
        {
            "location": "/", 
            "text": "NOVA API\n\n\nWelcome to the documentation for the NOVA project. NOVA stands for \nN\neatly \nO\nrganized \nV\noxel \nA\nPI\n and is a project to create a total abstraction layer for creating addons to Voxel games such as Minecraft and Tetrasology.\n\n\nMore about NOVA\n\n\nNOVA provides modders with the ability to write mods for any game or mod loader that has a NOVA-compatible wrapper for it - which will at first include Minecraft Forge for 1.7.10 and 1.8, but developers are free to write wrappers for any other mod loader or minecraft-like game. The goal of NOVA is to provide modders both with an API that is easy to understand and learn while giving them confidence that their work can be used in many different environments without a painful update process.\n\n\nMods written using the NOVA library can be run on Forge, or can be run on top of any other mod loader or minecraft-like game for which a NOVA wrapper is available. This means that mods do not have to update when Minecraft updates. Also, it makes us relatively independent from Minecraft (or any of its mod loaders, for that matter), providing modders with the confidence that their mod will be usable even if major issues arise in Minecraft world.\n\n\nAside from the Modding API, we also hope to provide a peaceful modding environment, open for everyone no matter their skills and experience.\n\n\nMinecraft modding is supposed to be fun - for everyone!\n\n\nWhat\ns an abstraction layer?\n\n\nEvery version of Minecraft is built slightly differently and so is every Minecraft alternative. As a result, every time Minecraft updates, every mod written for it has to be updated to keep pace with the internal changes - there is no stable API. Even different mod loaders can add their own functionality and their own APIs to its users.\n\n\nEven though the code itself is different between each, the concepts are generally very similar. Every Minecraft-like game has a concept of blocks, items, entities, worlds, \n and instead of having modders depend on how exactly they are implemented in each game and version, we can instead expose classes and functions that expose the concepts shared by them using a stable and well-thought out API.\n\n\nBy focusing on this common API, we can make it easy to use. Additionally, by making use of Java 8 (which will be a requirement for running any NOVA wrapper) we can provide the latest language features to all modders - resulting in a cleaner API and cleaner code.\n\n\nWhat inspired you to create this?\n\n\nBesides the difficulties with porting Minecraft mods from one version to another, we have recently also seen the disappearance of a major modding API (Bukkit). When Microsoft bought Minecraft, we were not sure what their plans are, and so far, a clear statement has been absent. Modders, however, don\nt like to mod not being sure if the mod can be used in future.\n\n\nAlthough we cannot control the future of Minecraft, we can create a common API, abstract all necessary concepts with this abstraction layer, and have modders work on that. No matter what explodes in Minecraft world, we can always write a wrapper for a different modding library or any game that would contain the necessary features. The API is licensed as LGPLv3 and can be used by anyone without any legal worries, ever. And we as developers intend to communicate openly with the modding community to make sure that modders have the functionality they need.", 
            "title": "Home"
        }, 
        {
            "location": "/#nova-api", 
            "text": "Welcome to the documentation for the NOVA project. NOVA stands for  N eatly  O rganized  V oxel  A PI  and is a project to create a total abstraction layer for creating addons to Voxel games such as Minecraft and Tetrasology.", 
            "title": "NOVA API"
        }, 
        {
            "location": "/#more-about-nova", 
            "text": "NOVA provides modders with the ability to write mods for any game or mod loader that has a NOVA-compatible wrapper for it - which will at first include Minecraft Forge for 1.7.10 and 1.8, but developers are free to write wrappers for any other mod loader or minecraft-like game. The goal of NOVA is to provide modders both with an API that is easy to understand and learn while giving them confidence that their work can be used in many different environments without a painful update process.  Mods written using the NOVA library can be run on Forge, or can be run on top of any other mod loader or minecraft-like game for which a NOVA wrapper is available. This means that mods do not have to update when Minecraft updates. Also, it makes us relatively independent from Minecraft (or any of its mod loaders, for that matter), providing modders with the confidence that their mod will be usable even if major issues arise in Minecraft world.  Aside from the Modding API, we also hope to provide a peaceful modding environment, open for everyone no matter their skills and experience.  Minecraft modding is supposed to be fun - for everyone!", 
            "title": "More about NOVA"
        }, 
        {
            "location": "/#whats-an-abstraction-layer", 
            "text": "Every version of Minecraft is built slightly differently and so is every Minecraft alternative. As a result, every time Minecraft updates, every mod written for it has to be updated to keep pace with the internal changes - there is no stable API. Even different mod loaders can add their own functionality and their own APIs to its users.  Even though the code itself is different between each, the concepts are generally very similar. Every Minecraft-like game has a concept of blocks, items, entities, worlds,   and instead of having modders depend on how exactly they are implemented in each game and version, we can instead expose classes and functions that expose the concepts shared by them using a stable and well-thought out API.  By focusing on this common API, we can make it easy to use. Additionally, by making use of Java 8 (which will be a requirement for running any NOVA wrapper) we can provide the latest language features to all modders - resulting in a cleaner API and cleaner code.", 
            "title": "What's an abstraction layer?"
        }, 
        {
            "location": "/#what-inspired-you-to-create-this", 
            "text": "Besides the difficulties with porting Minecraft mods from one version to another, we have recently also seen the disappearance of a major modding API (Bukkit). When Microsoft bought Minecraft, we were not sure what their plans are, and so far, a clear statement has been absent. Modders, however, don t like to mod not being sure if the mod can be used in future.  Although we cannot control the future of Minecraft, we can create a common API, abstract all necessary concepts with this abstraction layer, and have modders work on that. No matter what explodes in Minecraft world, we can always write a wrapper for a different modding library or any game that would contain the necessary features. The API is licensed as LGPLv3 and can be used by anyone without any legal worries, ever. And we as developers intend to communicate openly with the modding community to make sure that modders have the functionality they need.", 
            "title": "What inspired you to create this?"
        }, 
        {
            "location": "/JavaDoc Style/", 
            "text": "Use sentence case, eg: \nThis is an example of sentence case.\n\n\nUse {@code something} for names of things (like \ntrue\n)\n\n\nLeave a gap after the description\n\n\nUse a full stop after every sentence\n\n\n\n\nExample 1\n\n\n/**\n * Called when the block is right clicked.\n *\n * @param entity The entity that right clicked this object. Most likely a player.\n * @param side The side it was clicked.\n * @param hit The position it was clicked.\n * @return {@code true} if the right click action does something.\n */\npublic boolean onRightClick(Entity entity, int side, Vector3d hit) {\n    return false;\n}\n\n\n\n\n\n\nFor \n{@link}\n tags, use the full location.\n\n\n\n\nExample 2\n\n\n/**\n * Called to get the BlockFactory that refers to this Block class.\n *\n * @return The {@link nova.core.block.BlockFactory} that refers to this Block class.\n */\npublic final BlockFactory getFactory() {\n    return Game.instance.get().blockManager.getBlockFactory(this.getID()).get();\n}", 
            "title": "JavaDoc Style"
        }, 
        {
            "location": "/Setting up development workspace/", 
            "text": "This is the temporary way to set up a NOVA workspace until Nova Gradle is complete.\n\n\nMinecraft\n\n\nIn Eclipse, we will refer to each repository as a project. In IntelliJ, it will be referred to as a module.\n\n\n\n\nDo a normal Forge set up (eclipse or intellij)\n\n\nClone NOVAWrapper and NovaCore\n\n\nImport the two reponsitories as Gradle projects\n\n\nMake NovaWrapper project/module depend Forge module\n\n\nMake NovaWrapper depend on NovaCore (if Gradle already added the jar dependency, change it to dependend on the repository you just cloned)\n\n\nAny NOVA mod should ONLY depend on Nova Core. The wrapper is only used to run the mod on Minecraft.\n\n\nAdd to VM arguments \n-Dfml.coreMods.load=nova.wrapper.mc1710.NovaMinecraftCore", 
            "title": "Setting up development workspace"
        }
    ]
}